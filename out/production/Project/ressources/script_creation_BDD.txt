DROP DATABASE store;
CREATE DATABASE store;
USE store;

DROP TABLE IF EXISTS `person_type`;
CREATE TABLE person_type (
                             id INT AUTO_INCREMENT,
                             wording varchar(50) NOT NULL,
                             CONSTRAINT person_type_pk
                                 PRIMARY KEY(id)
);

DROP TABLE IF EXISTS `person`;
CREATE TABLE person (
                        number INT AUTO_INCREMENT,
                        last_name varchar(30) NOT NULL,
                        phone_number numeric(11) NOT NULL,
                        email varchar(50) NOT NULL,
                        first_name varchar(30),
                        VAT_number varchar(12),
                        nb_fidelity_points numeric,
                        has_badge boolean NOT NULL,
                        type INT NOT NULL,

                        CONSTRAINT person_pk
                            PRIMARY KEY(number),
                        CONSTRAINT person_fk
                            FOREIGN KEY(type)
                                REFERENCES person_type(id)
);

DROP TABLE IF EXISTS `address`;
CREATE TABLE address (
                         house_number numeric(10),
                         street_name varchar(45),
                         city_name varchar(45),
                         postal_code numeric(8),
                         country varchar(25),
                         inhabitant INT NOT NULL,

                         CONSTRAINT address_pk
                             PRIMARY KEY(house_number, street_name, city_name, postal_code, country),
                         CONSTRAINT address_fk
                             FOREIGN KEY(inhabitant)
                                 REFERENCES person(number)
);

DROP TABLE IF EXISTS `document_type`;
CREATE TABLE document_type (
                               id INT AUTO_INCREMENT,
                               wording varchar(50) NOT NULL,

                               CONSTRAINT document_type_pk
                                   PRIMARY KEY(id)
);

DROP TABLE IF EXISTS `workflow_type`;
CREATE TABLE workflow_type (
                               id INT AUTO_INCREMENT,
                               wording varchar(50) NOT NULL,

                               CONSTRAINT workflow_type_pk
                                   PRIMARY KEY(id)
);

DROP TABLE IF EXISTS `workflow`;
CREATE TABLE workflow (
                          id INT AUTO_INCREMENT,
                          type INT NOT NULL,

                          CONSTRAINT workflow_pk
                              PRIMARY KEY(id),
                          CONSTRAINT workflow_fk
                              FOREIGN KEY(type)
                                  REFERENCES workflow_type(id)
);

DROP TABLE IF EXISTS `document`;
CREATE TABLE document (
                          number INT AUTO_INCREMENT,
                          creation_date date NOT NULL,
                          payment_condition varchar(100),
                          credit_limit decimal(8, 2),
                          type INT NOT NULL,
                          process INT NOT NULL NOT NULL,
                          update_the_stock BOOLEAN NOT NULL,

                          CONSTRAINT document_pk
                              PRIMARY KEY(number),
                          CONSTRAINT document_fk
                              FOREIGN KEY(type)
                                  REFERENCES document_type(id),
                          FOREIGN KEY(process)
                              REFERENCES workflow(id)
);

DROP TABLE IF EXISTS `pointing`;
CREATE TABLE pointing(
                         employee INT NOT NULL,
                         date datetime NOT NULL,
                         type VARCHAR(50) NOT NULL,

                         CONSTRAINT pointing_pk
                             PRIMARY KEY(employee, date),
                         CONSTRAINT pointing_fk
                             FOREIGN KEY (employee)
                                 REFERENCES person(number)
);

DROP TABLE IF EXISTS `traceability`;
CREATE TABLE traceability(
                             person INT NOT NULL,
                             document INT NOT NULL,

                             CONSTRAINT traceability_pk
                                 PRIMARY KEY(person, document),
                             CONSTRAINT traceability_fk
                                 FOREIGN KEY (person)
                                     REFERENCES person(number),
                             FOREIGN KEY (document)
                                 REFERENCES document(number) ON DELETE CASCADE
);

DROP TABLE IF EXISTS `item`;
CREATE TABLE item(
                     id INT AUTO_INCREMENT,
                     wording varchar(50) NOT NULL,
                     production_date date,
                     packaging varchar(50) NOT NULL,
                     minimum_level numeric(4) NOT NULL,
                     quantity_in_stock INT NOT NULL,
                     CONSTRAINT item_pk
                         PRIMARY KEY(id)
);

DROP TABLE IF EXISTS `promotion`;
CREATE TABLE promotion(
                          id INT AUTO_INCREMENT,
                          percentage INT NOT NULL,
                          start_date date NOT NULL,
                          end_date date NOT NULL,
                          item INT NOT NULL,

                          CONSTRAINT promotion_pk
                              PRIMARY KEY(id),
                          CONSTRAINT promotion_fk
                              FOREIGN KEY (item)
                                  REFERENCES item(id)
);

DROP TABLE IF EXISTS `lot`;
CREATE TABLE lot(
                    reference INT AUTO_INCREMENT,
                    arrivage_date date NOT NULL,
                    expiration_date date NOT NULL,

                    CONSTRAINT lot_pk
                        PRIMARY KEY(reference)
);

DROP TABLE IF EXISTS `detail`;
CREATE TABLE detail(
                       code INT AUTO_INCREMENT,
                       unit_price decimal(5,2) NOT NULL,
                       quantity numeric(4) NOT NULL,
                       vat_rate decimal(3,3) NOT NULL,
                       back_order numeric(4),
                       document INT NOT NULL,
                       item INT NOT NULL,
                       lot INT,
                       CONSTRAINT detail_pk
                           PRIMARY KEY(code),
                       CONSTRAINT detail_fk
                           FOREIGN KEY (document)
                               REFERENCES document(number) ON DELETE CASCADE,
                       FOREIGN KEY (item)
                           REFERENCES item(id),
                       FOREIGN KEY (lot)
                           REFERENCES lot(reference)

);

DROP TABLE IF EXISTS `recipe`;
CREATE TABLE recipe(
                       ingredient INT,
                       food INT,
                       CONSTRAINT recipe_pk
                           PRIMARY KEY(ingredient, food),
                       CONSTRAINT recipe_fk
                           FOREIGN KEY (ingredient)
                               REFERENCES item(id),
                       FOREIGN KEY (food)
                           REFERENCES item(id)
);

#Création workflow_type
INSERT INTO workflow_type(wording)
VALUES ('Purchasing process');
INSERT INTO workflow_type(wording)
VALUES ('selling process');

#Création workflow
INSERT INTO workflow(type)
VALUES (1);
INSERT INTO workflow(type)
VALUES (2);

# Création document_type
INSERT INTO document_type(wording)
VALUES ('Facture');
INSERT INTO document_type(wording)
VALUES ('Bon de commande');
INSERT INTO document_type(wording)
VALUES ('Bon de livraison');
INSERT INTO document_type(wording)
VALUES ('Bon de vente');

# Création document
INSERT INTO document(creation_date, payment_condition, credit_limit, type, process, update_the_stock)
VALUES (CURRENT_DATE, 'payment''s conditions here', 135.5, 1, 1, FALSE);
INSERT INTO document(creation_date, payment_condition, credit_limit, type, process, update_the_stock)
VALUES (CURRENT_DATE, 'payment''s conditions here', 90.9, 4, 2, TRUE);
INSERT INTO document(creation_date, payment_condition, credit_limit, type, process, update_the_stock)
VALUES ('2021-05-01', null, null, 4, 2, TRUE);
INSERT INTO document(creation_date, payment_condition, credit_limit, type, process, update_the_stock)
VALUES ('2022-06-06', null, null, 4, 2, TRUE);
INSERT INTO document(creation_date, payment_condition, credit_limit, type, process, update_the_stock)
VALUES ('2022-04-02', null, null, 4, 2, TRUE);

# Création d'item



#Création Promotion
INSERT INTO promotion(percentage, start_date, end_date, item)
VALUES (30, '2022-04-01','2022-05-31' , 3);
INSERT INTO promotion(percentage, start_date, end_date, item)
VALUES (10, '2022-06-01','2022-07-31' , 3);
INSERT INTO promotion(percentage, start_date, end_date, item)
VALUES (70, '2021-04-01','2021-05-31' , 1);

#Création lot
INSERT INTO lot(arrivage_date, expiration_date)
VALUES ('2020-06-01','2025-07-31');

#Création détail
INSERT INTO detail(unit_price, quantity, vat_rate, back_order, document, item, lot)
VALUES (2.50,50,0.26 ,null,2,3,1);
INSERT INTO detail(unit_price, quantity, vat_rate, back_order, document, item, lot)
VALUES (5.99,30,0.26 ,null,2,3,1);
INSERT INTO detail(unit_price, quantity, vat_rate, back_order, document, item, lot)
VALUES (5.99,20,0.26 ,null,5,1,1);
INSERT INTO detail(unit_price, quantity, vat_rate, back_order, document, item, lot)
VALUES (2,10,0.26 ,null,4,3,1);

# Création person_type
INSERT INTO person_type(wording)
VALUES ('Employee');
INSERT INTO person_type(wording)
VALUES ('Customer');
INSERT INTO person_type(wording)
VALUES ('Supplier');

# Création personne
INSERT INTO person (last_name, phone_number, email, first_name, VAT_number, nb_fidelity_points, has_badge, type)
VALUES ('Dautrebande', 0470468180, 'etu45973@henallux.be', 'Youri', '456123789456', 50, TRUE, 1);
INSERT INTO person (last_name, phone_number, email, first_name, VAT_number, nb_fidelity_points, has_badge, type)
VALUES ('Filée', 0470468180, 'etu45973@henallux.be', 'Arnauld', '456123789456', 50, FALSE, 1);
INSERT INTO person (last_name, phone_number, email, first_name, VAT_number, nb_fidelity_points, has_badge, type)
VALUES ('Molitor', 0470468180, 'etu45973@henallux.be', 'Bryce', '456123789456', 50, FALSE, 2);
INSERT INTO person (last_name, phone_number, email, first_name, VAT_number, nb_fidelity_points, has_badge, type)
VALUES ('Casano', 0470468180, 'etu45973@henallux.be', '', '456123789456', 50, TRUE, 1);
INSERT INTO person (last_name, phone_number, email, first_name, VAT_number, nb_fidelity_points, has_badge, type)
VALUES ('Ciciotti', 0470468180, 'etu45973@henallux.be', 'Timothé', '456123789456', 50, FALSE, 3);

#Création pointing (type de pointage = entrée/sortie)
INSERT INTO pointing(employee, date, type)
VALUES (1, '2022-02-28 08:35', 'Entrée');
INSERT INTO pointing(employee, date, type)
VALUES (4, '2022-02-28 09:01', 'Entrée');
INSERT INTO pointing(employee, date, type)
VALUES (4, '2022-02-28 17:30', 'Sortie');
INSERT INTO pointing(employee, date, type)
VALUES (1, '2022-02-28 17:32', 'Sortie');
INSERT INTO pointing(employee, date, type)
VALUES (2, '2022-03-03 07:50', 'Entrée');
INSERT INTO pointing(employee, date, type)
VALUES (4, '2022-03-03 08:05', 'Entrée');
INSERT INTO pointing(employee, date, type)
VALUES (2, '2022-03-03 18:00', 'Sortie');
INSERT INTO pointing(employee, date, type)
VALUES (4, '2022-03-03 18:05', 'Sortie');
INSERT INTO pointing(employee, date, type)
VALUES (1, '2022-03-04 07:55', 'Entrée');
INSERT INTO pointing(employee, date, type)
VALUES (2, '2022-03-04 07:59', 'Entrée');


